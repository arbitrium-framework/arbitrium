name: Code Quality CI

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write # For CodeQL

jobs:
  # ============================================================================
  # Pre-commit checks (fast feedback)
  # ============================================================================
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files

  # ============================================================================
  # Test effectiveness (Coverage + Hypothesis property-based testing)
  # Evidence: Branch coverage correlates with defect detection
  # ============================================================================
  test-coverage:
    name: Test Coverage & Property-Based Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run tests with coverage
        run: |
          pytest --cov=src/arbitrium --cov-report=xml --cov-report=term-missing --cov-branch -n auto

      - name: Coverage report
        run: |
          coverage report --fail-under=15 --skip-covered --show-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # ============================================================================
  # Mutation Testing (test effectiveness validation)
  # Evidence: Mutation score correlates with real fault detection
  # ============================================================================
  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run mutation testing on changed files
        run: |
          # Get changed Python files in src/
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '^src/.*\.py$' || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Running mutation testing on: $CHANGED_FILES"
            mutmut run --paths-to-mutate=$(echo $CHANGED_FILES | tr '\n' ',')
            mutmut results
            mutmut show
          else
            echo "No Python files changed in src/"
          fi

  # ============================================================================
  # Complexity & Maintainability Metrics
  # Evidence: Cyclomatic complexity correlates with defect density
  # ============================================================================
  complexity-checks:
    name: Complexity & Maintainability Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install radon
        run: |
          python -m pip install --upgrade pip
          pip install radon

      - name: Check cyclomatic complexity
        run: |
          echo "=== Cyclomatic Complexity Report ==="
          radon cc src/ --min B --show-complexity --total-average

      - name: Check maintainability index
        run: |
          echo "=== Maintainability Index Report ==="
          radon mi src/ --min B --show

      - name: Fail on high complexity
        run: |
          # Fail if any function has complexity > 10 (grade C or worse)
          radon cc src/ --min C --total-average || (echo "High complexity detected" && exit 1)

  # ============================================================================
  # Architecture & Import Contracts
  # Evidence: Coupling/architecture violations correlate with defect density
  # ============================================================================
  architecture-checks:
    name: Architecture & Import Contracts
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Check import contracts
        run: lint-imports

  # ============================================================================
  # Security scanning is handled by semgrep in pre-commit hooks
  # ============================================================================

  # ============================================================================
  # SonarCloud Quality Gate
  # Evidence: Complexity/duplication metrics correlate with defect density
  # ============================================================================
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test-coverage
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones disabled for better analysis

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=arbitrium-framework
            -Dsonar.organization=nikolay-e
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.python.version=3.10,3.11,3.12
        continue-on-error: true # Don't fail build on quality gate failure initially

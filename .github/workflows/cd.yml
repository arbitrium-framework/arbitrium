# .github/workflows/cd.yml
name: Arbitrium Framework CD

permissions:
  contents: write

"on":
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  prepare-release:
    name: Prepare Commit and Create GitHub Release/Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_outputs.outputs.version }}
      tag_name: ${{ steps.set_outputs.outputs.tag_name }}
      commit_sha: ${{ steps.commit_push.outputs.commit_sha }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set version in __about__.py
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Setting version to $VERSION"
          # Robust version updating using Python
          python -c "
          with open('src/arbitrium/__about__.py', 'r') as f:
              content = f.read()
          with open('src/arbitrium/__about__.py', 'w') as f:
              lines = content.split('\n')
              for i, line in enumerate(lines):
                  if line.startswith('__version__'):
                      lines[i] = f'__version__ = \"$VERSION\"'
              f.write('\n'.join(lines))
          "
          echo "__about__.py content after change:"
          cat src/arbitrium/__about__.py

      - name: Commit and Push version bump
        id: commit_push
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

          # Get current branch name for explicit push target
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CURRENT_BRANCH"

          VERSION="${{ github.event.inputs.version }}"
          COMMIT_MSG="Release version $VERSION"

          # Check if the last commit already has this message (idempotent)
          LAST_COMMIT_MSG=$(git log -1 --pretty=%s)
          if [ "$LAST_COMMIT_MSG" = "$COMMIT_MSG" ]; then
            echo "Version bump commit already exists, skipping commit"
          else
            git add src/arbitrium/__about__.py
            if ! git diff --staged --quiet; then
              git commit -m "$COMMIT_MSG"
              echo "Committed version bump"
            else
              echo "No changes to commit."
            fi
          fi

          COMMIT_SHA=$(git rev-parse HEAD)
          echo "Commit SHA: $COMMIT_SHA"
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          # Push to remote (this is safe if commit already exists on remote)
          git push origin $CURRENT_BRANCH || echo "Push may have already been done"

      - name: Delete existing tag and release if present
        continue-on-error: true
        run: |
          TAG_NAME="v${{ github.event.inputs.version }}"
          echo "Checking if tag $TAG_NAME exists..."

          # Delete release if it exists
          if gh release view "$TAG_NAME" &>/dev/null; then
            echo "Release $TAG_NAME exists, deleting..."
            gh release delete "$TAG_NAME" --yes --cleanup-tag
          else
            echo "Release $TAG_NAME does not exist"
          fi

          # Delete tag if it exists (local and remote)
          if git rev-parse "$TAG_NAME" &>/dev/null; then
            echo "Tag $TAG_NAME exists locally, deleting..."
            git tag -d "$TAG_NAME"
          fi

          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
            echo "Tag $TAG_NAME exists on remote, deleting..."
            git push origin ":refs/tags/$TAG_NAME"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release and Tag
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          committish: ${{ steps.commit_push.outputs.commit_sha }}
          draft: false
          prerelease: false

      - name: Set outputs for subsequent jobs
        id: set_outputs
        run: |
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "tag_name=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

  publish-to-pypi:
    name: Publish to PyPI
    needs: prepare-release
    if: github.event.inputs.publish_to_pypi == 'true'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/arbitrium-framework
    permissions:
      id-token: write
    steps:
      - name: Checkout Code at release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build sdist and wheel
        run: python -m build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  update-main-branch:
    name: Update main branch (Merge Tag)
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Merge tag into main
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          echo "Attempting to merge tag ${{ needs.prepare-release.outputs.tag_name }} into main"
          git merge ${{ needs.prepare-release.outputs.tag_name }} --no-ff -m "Merge tag ${{ needs.prepare-release.outputs.tag_name }} into main"
          git push origin main
